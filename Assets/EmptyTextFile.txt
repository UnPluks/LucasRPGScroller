//Ep 22 Steps
1.	Tidy Up Project and Set Hirarchy
	Create Multiple Json Quest Files

2. 	Create PlayerData.cs

3. 	NPC Controller 
	a. Remove SetExampleQuest()
	b. Add int[] quests
	c. Add ShowQuestInfo()

4. 	Quest Manager
	a.Create New Quest Button


	//Check Repeated Quests
			bool isRepeated = false;
			foreach(Transform t in UIManager.instance.questGridContent){
				//if we found transform with the name of the id of the quest, we continue (we don't create that prefab again)
				if(t.name == questDictionary[i].id.ToString()) isRepeated = true;
			}
			if(isRepeated) continue;


29/12/2016

Player Data
	Change List<int> into Dictionaries <id, class>
	Change AddActiveQuest function

Quest Manager
	When checking if the quest is already in ActiveQuests, just see if Dictionary.containsKey(quest.id)

Before Addig quests or adding to monster kills, make sure to create the object first.


///////////
//using System.Collections;
//using System.Collections.Generic;
//using UnityEngine;
//using UnityEngine.UI;
//
//public class NPCController : MonoBehaviour {
//
//	[SerializeField] int[] quests;
//	[SerializeField] string[] dialogues;
//	public int dialogueIndex = 0;
//
//	void Start () {
//		foreach(int i in quests){
//			QuestManager.instance.LoadQuest(i);
//		}
//	}
//
//	public void ShowDialogue(){
//		if(dialogueIndex > (dialogues.Length - 1)){
//			DialogueManager.instance.CloseDialogueBox();
//			dialogueIndex = (dialogues.Length - 2);
//		} 
//		else{
//			DialogueManager.instance.PrintOnDialogueBox(name + ": " + dialogues[dialogueIndex]);
//		}
//	}
//
//	public void ShowQuestInfo(){
//		foreach(int i in quests){
//			if(
//				//Did the player Finished this quest?
//				!PlayerData.finishedQuests.Contains(i) &&
//				//Do the player meet the requirements?
//				QuestManager.instance.IsQuestAvailable(i, GameObject.Find("Player").GetComponent<PlayerController>())
//			){
//				//Show the info of the quest
//				QuestManager.instance.ShowQuestInfo(QuestManager.instance.questDictionary[quests[i]]);
//
//				//Set the Complete Quest Button
//				if(QuestManager.instance.IsQuestFinished(i)){
//					UIManager.instance.questInfoCompleteButton.gameObject.SetActive(true);
//					UIManager.instance.questInfoCompleteButton.onClick.AddListener(() => {
//						ReceiveCompletedQuest(QuestManager.instance.questDictionary[quests[i]]);
//						PlayerData.activeQuests.Remove(i);
//						PlayerData.finishedQuests.Add(i);
//						UIManager.instance.questInfo.gameObject.SetActive(false);
//						UIManager.instance.questInfoCompleteButton.onClick.RemoveAllListeners();
//					});
//				}
//				break;
//			}
//		}
//	}
//
//	public void ReceiveCompletedQuest(Quest quest){
//		print("QUEST COMPLETED");
//		if(quest.reward.exp > 0) PlayerController.main.SetExperience(quest.reward.exp);
//		if(quest.reward.items.Length > 0) {
//			foreach(var item in quest.reward.items){
//				print("You get:("+item.amount+")x" + ItemDatabase.items[item.id]);
//				//ex. playerController.inventory.add(item.id, item.amount);
//			}
//		}
//	}
//
//	public void OnClick(){
//		ShowQuestInfo();
//		//More functions?
//	}
//}
